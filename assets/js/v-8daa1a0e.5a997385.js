"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[509],{7060:(e,o,t)=>{t.r(o),t.d(o,{default:()=>W});var n=t(6252);const a=(0,n._)("h2",{id:"installation",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#installation","aria-hidden":"true"},"#"),(0,n.Uk)(" Installation")],-1),i=(0,n._)("h3",{id:"cargo",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#cargo","aria-hidden":"true"},"#"),(0,n.Uk)(" Cargo")],-1),s=(0,n.Uk)("Cocogitto is available on "),c={href:"https://crates.io/crates/cocogitto",target:"_blank",rel:"noopener noreferrer"},l=(0,n.Uk)("crates.io"),r=(0,n.Uk)(" :"),h=(0,n.uE)('<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-built_in">cargo</span> install cocogitto\n</code></pre></div><h3 id="archlinux" tabindex="-1"><a class="header-anchor" href="#archlinux" aria-hidden="true">#</a> Archlinux</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-built_in">yay</span> -S cocogitto-bin\n</code></pre></div><h2 id="shell-completions" tabindex="-1"><a class="header-anchor" href="#shell-completions" aria-hidden="true">#</a> Shell completions</h2><p>Before getting started you might want to install shell completions for <code>cog</code> and <code>coco</code> commands. Supported shells are <code>bash</code>, <code>elvish</code>, <code>fish</code> and <code>zsh</code>.</p><p>Example installing completions:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-comment"># Bash</span>\n<span class="hljs-built_in">cog</span> generate-completions bash &gt; ~/.local/share/bash-completion/completions/cog\n<span class="hljs-built_in">coco</span> generate-completions bash &gt; ~/.local/share/bash-completion/completions/coco\n\n<span class="hljs-comment"># Bash (macOS/Homebrew)</span>\n<span class="hljs-built_in">cog</span> generate-completions bash &gt; $(brew --prefix)/etc/bash_completion.d/cog.bash-completion\n<span class="hljs-built_in">coco</span> generate-completions bash &gt; $(brew --prefix)/etc/bash_completion.d/coco.bash-completion\n\n<span class="hljs-comment"># Fish</span>\n<span class="hljs-built_in">mkdir</span> -p ~/.config/fish/completions\n<span class="hljs-built_in">cog</span> generate-completions fish &gt; ~/.config/fish/completions/cog.fish\n<span class="hljs-built_in">coco</span> generate-completions fish &gt; ~/.config/fish/completions/coco.fish\n\n<span class="hljs-comment"># Zsh</span>\n<span class="hljs-built_in">cog</span> generate-completions zsh &gt; ~/.zfunc/_cog\n<span class="hljs-built_in">coco</span> generate-completions zsh &gt; ~/.zfunc/_coco\n</code></pre></div><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Cocogitto comes with two standalone binaries : <code>coco</code> and <code>cog</code>.</p><p>Both of them and their subcommands have a <code>--help</code> to display options and usage :</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-built_in">cog</span> --help\n<span class="hljs-built_in">cog</span> changelog --help\n<span class="hljs-comment"># And so on...</span>\n</code></pre></div><p>Note that if you do not care about automatic release, changelog generation and just want to create conventional commit message you can jump to the <a href="./coco_guide">conventional commits section</a>.</p><h2 id="conventional-commits-with-coco" tabindex="-1"><a class="header-anchor" href="#conventional-commits-with-coco" aria-hidden="true">#</a> Conventional commits with <code>coco</code></h2><p><code>coco</code> is primarily meant to be used as a replacement for the <code>git commit</code> command. It will produce commits with messages respecting the conventional commits specification with little effort.</p><p><strong>Example :</strong></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-comment"># With git commit</span>\n<span class="hljs-built_in">git</span> commit -m <span class="hljs-string">&quot;feat: implement the parser specification&quot;</span>\n\n<span class="hljs-comment"># With coco</span>\n<span class="hljs-built_in">coco</span> feat <span class="hljs-string">&quot;implement the parser specification&quot;</span>\n</code></pre></div><p>Using <code>coco</code> while working on a project using conventional commits is less verbose than good old git cli and prevent typos and common mistake when writing conventional commit messages.</p><p>See <a href="./coco_guide">Coco guide</a> for more information.</p><h2 id="repository-management-with-cog" tabindex="-1"><a class="header-anchor" href="#repository-management-with-cog" aria-hidden="true">#</a> Repository management with <code>cog</code></h2><p>While local commit are made with the <code>coco</code> binary, <code>cog</code> is meant to manage your repository both locally and in a CI context. For an in depth guide on how to use it see <a href="./cog_guide">Cog guide</a>.</p><h2 id="github-integration" tabindex="-1"><a class="header-anchor" href="#github-integration" aria-hidden="true">#</a> GitHub integration</h2><h3 id="github-action" tabindex="-1"><a class="header-anchor" href="#github-action" aria-hidden="true">#</a> GitHub Action</h3>',22),d=(0,n.Uk)("Anything you can do with "),p=(0,n._)("code",null,"cog",-1),g=(0,n.Uk)(" and "),m=(0,n._)("code",null,"coco",-1),u=(0,n.Uk)(" can be done in your CI pipeline with "),b={href:"https://github.com/cocogitto/cocogitto-action",target:"_blank",rel:"noopener noreferrer"},f=(0,n.Uk)("cocogitto-action"),v=(0,n.Uk)("."),_=(0,n.Uk)("See "),w=(0,n.Uk)("Github integration -> GitHub action"),y=(0,n.Uk)(" for more info."),k=(0,n._)("h3",{id:"github-bot",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#github-bot","aria-hidden":"true"},"#"),(0,n.Uk)(" GitHub Bot")],-1),x=(0,n.Uk)("To help your contributors respect the specification "),j={href:"https://github.com/apps/cocogitto-bot",target:"_blank",rel:"noopener noreferrer"},U=(0,n.Uk)("cocogitto-bot"),C=(0,n.Uk)(" can decorate your PR with conventional commits status checks."),G=(0,n.Uk)("See "),S=(0,n.Uk)("Github integration -> GitHub bot"),H=(0,n.Uk)(" for more info."),I={},W=(0,t(3744).Z)(I,[["render",function(e,o){const t=(0,n.up)("OutboundLink"),I=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[a,i,(0,n._)("p",null,[s,(0,n._)("a",c,[l,(0,n.Wm)(t)]),r]),h,(0,n._)("p",null,[d,p,g,m,u,(0,n._)("a",b,[f,(0,n.Wm)(t)]),v]),(0,n._)("p",null,[_,(0,n.Wm)(I,{to:"/ci_cd/#github-action"},{default:(0,n.w5)((()=>[w])),_:1}),y]),k,(0,n._)("p",null,[x,(0,n._)("a",j,[U,(0,n.Wm)(t)]),C]),(0,n._)("p",null,[G,(0,n.Wm)(I,{to:"/ci_cd/#github-action"},{default:(0,n.w5)((()=>[S])),_:1}),H])],64)}]])},3744:(e,o)=>{o.Z=(e,o)=>{const t=e.__vccOpts||e;for(const[e,n]of o)t[e]=n;return t}},3301:(e,o,t)=>{t.r(o),t.d(o,{data:()=>n});const n={key:"v-8daa1a0e",path:"/",title:"",lang:"en-US",frontmatter:{home:!0,heroImage:"logo.png",tagline:"The conventional commit toolbox",actionText:"Getting Started →",actionLink:"/guide/",features:[{title:"Verified commits️",details:"Create conventional compliant commits at ease."},{title:"Automatic Version bump and changelog",details:"Automatically bump version and generate changelog with your own custom steps and workflows."},{title:"Release profiles",details:"Your branching model requires different steps for releases, prerelease, hotfix ? We got you covered !"},{title:"Depends only on libgit2",details:"Cocogitto has two standalone binary, the only system dependency is libgit2."},{title:"Conventional git log",details:"Search your commit history matching conventional commit items such as scope and commit type."},{title:"Enforce conventional commits via github actions",details:"Check your commit compliance on every push to the remote and create release from your CI pipeline or using our Github bot."}],footer:"MIT Licensed | Copyright © 2020 Paul Delafosse"},excerpt:"",headers:[{level:2,title:"Installation",slug:"installation",children:[{level:3,title:"Cargo",slug:"cargo",children:[]},{level:3,title:"Archlinux",slug:"archlinux",children:[]}]},{level:2,title:"Shell completions",slug:"shell-completions",children:[]},{level:2,title:"Introduction",slug:"introduction",children:[]},{level:2,title:"Conventional commits  with coco",slug:"conventional-commits-with-coco",children:[]},{level:2,title:"Repository management with cog",slug:"repository-management-with-cog",children:[]},{level:2,title:"GitHub integration",slug:"github-integration",children:[{level:3,title:"GitHub Action",slug:"github-action",children:[]},{level:3,title:"GitHub Bot",slug:"github-bot",children:[]}]}],filePathRelative:"index.md",git:{updatedTime:1637750134e3,contributors:[{name:"Paul Delafosse",email:"paul.delafosse@protonmail.com",commits:5}]}}}}]);