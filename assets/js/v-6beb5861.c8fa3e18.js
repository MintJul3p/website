"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[134],{9827:(e,s,a)=>{a.r(s),a.d(s,{default:()=>E});var o=a(6252);const n=(0,o._)("h2",{id:"conventional-commits",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#conventional-commits","aria-hidden":"true"},"#"),(0,o.Uk)(" Conventional commits")],-1),t=(0,o._)("code",null,"coco",-1),c=(0,o.Uk)(" allows you to easily create commits respecting the "),l={href:"https://www.conventionalcommits.org/en/v1.0.0/",target:"_blank",rel:"noopener noreferrer"},i=(0,o.Uk)("conventional commits specification"),r=(0,o.Uk)(". It comes with a set of predefined arguments named after conventional commit types and "),d={href:"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines",target:"_blank",rel:"noopener noreferrer"},p=(0,o.Uk)("Angular commit convention"),m=(0,o.uE)(" : (<code>feat</code>, <code>fix</code>, <code>style</code>, <code>build</code>, <code>refactor</code>, <code>ci</code>, <code>test</code>, <code>perf</code>, <code>chore</code>, <code>revert</code>, <code>docs</code>).",23),h=(0,o.uE)('<p>As described in the specification conventional commits messages are structured as follows :</p><div class="language-conventional ext-conventional"><pre class="language-conventional"><code><span class="hljs-string">&lt;type&gt;</span>[<span class="hljs-literal">optional</span> scope]: <span class="hljs-string">&lt;description&gt;</span>\n\n[<span class="hljs-literal">optional</span> body]\n\n[<span class="hljs-literal">optional</span> footer(s)]\n</code></pre></div><p>All <code>coco</code> commit type subcommands follow the same structure :</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-built_in">coco</span> [OPTIONS] &lt;type&gt; &lt;message&gt; [scope]\n</code></pre></div><p>Note that <code>coco</code> commit scope comes after the commit description. This allows using positional arguments instead of typing a scope flag every time.</p><p><strong>Example :</strong></p><p>If you want to create the following commit : <code>feat: add awesome feature</code> :</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-comment"># With coco</span>\n<span class="hljs-built_in">coco</span> feat <span class="hljs-string">&quot;add awesome feature&quot;</span>\n\n<span class="hljs-comment"># With git</span>\n<span class="hljs-built_in">git</span> commit -m <span class="hljs-string">&quot;feat: add awesome feature&quot;</span>\n</code></pre></div><h2 id="helpful-error-messages" tabindex="-1"><a class="header-anchor" href="#helpful-error-messages" aria-hidden="true">#</a> Helpful error messages</h2><p>Using <code>coco</code> should prevent a wide range of error in your conventional commit message. But if you still made a mistake, <code>coco</code> will display an error explaining what went wrong :</p><div class="language-bash ext-sh"><pre class="language-bash"><code>‚ùØ <span class="hljs-built_in">coco</span> feat <span class="hljs-string">&quot;add ability to parse arrays&quot;</span> <span class="hljs-string">&quot;sco(pe&quot;</span>\nError: A scope value cannot contains inner parenthesis\n\nCaused by:\n     --&gt; 1:9\n      |\n    1 | feat(sco(pe): add ability to parse arrays\n      |         ^---\n      |\n      = expected no_parenthesis\n</code></pre></div><h2 id="breaking-changes" tabindex="-1"><a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a> Breaking changes</h2><p>All <code>coco</code> arguments are positional except the optional <code>-B</code> flag used to create breaking changes commits :</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-built_in">coco</span> fix -B <span class="hljs-string">&quot;add fix a nasty bug&quot;</span> cli\n</code></pre></div>',14),u=(0,o.Uk)("This would create the following "),g={href:"https://www.conventionalcommits.org/en/v1.0.0/#commit-message-with--to-draw-attention-to-breaking-change",target:"_blank",rel:"noopener noreferrer"},b=(0,o.Uk)("breaking change"),f=(0,o.Uk)(" commit : "),v=(0,o._)("code",null,"fix(cli)!: fix a nasty bug",-1),y=(0,o.Uk)("."),w=(0,o._)("code",null,"coco",-1),k=(0,o.Uk)(" use the "),x=(0,o._)("code",null,"!",-1),j=(0,o.Uk)(" notation to denote breaking changes commit because it can be easily seen in your git log, however if you manually create breaking changes commits with "),_={href:"https://www.conventionalcommits.org/en/v1.0.0/#commit-message-with-description-and-breaking-change-footer",target:"_blank",rel:"noopener noreferrer"},U=(0,o.Uk)("the footer notation"),q=(0,o.Uk)(" cocogitto tools will still pick them."),T=(0,o.uE)('<h2 id="commit-body-and-footers" tabindex="-1"><a class="header-anchor" href="#commit-body-and-footers" aria-hidden="true">#</a> Commit Body and footers</h2><p>If you need to create more complex commit messages with body and footers use the <code>--edit</code> flag.</p><p><strong>Example:</strong></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="hljs-built_in">coco</span> refactor -e -B <span class="hljs-string">&quot;drop support for Node 6&quot;</span> runtime \n</code></pre></div><p>This would open the following commit message template in your <code>$EDITOR</code> of choice :</p><div class="language-editor ext-editor line-numbers-mode"><pre class="language-editor"><code><span class="hljs-comment"># Enter the commit message for your changes.</span>\n<span class="hljs-comment"># Lines starting with # will be ignored, and empty body/footer are allowed.</span>\n<span class="hljs-comment"># Once you are done, save the changes and exit the editor.</span>\n<span class="hljs-comment"># Remove all non-comment lines to abort.</span>\n<span class="hljs-comment">#</span>\n<span class="hljs-comment"># WARNING: This will be marked as a breaking change!</span>\nrefactor(runtime): drop support for Node 6\n\n<span class="hljs-comment"># Message body</span>\n\n\n<span class="hljs-comment"># Message footer</span>\n<span class="hljs-comment"># For example, foo: bar</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Upon save a commit will be created with the body and footer typed.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>There are to kind of footer separators in conventional commits : <code>token: message</code> and <code>token #message</code>.</p><p>GitHub automatically link issues prefixed with a hash.</p><p><strong>Example:</strong></p><div class="language-text ext-text"><pre class="language-text"><code>    feat(changelog): add full_hash changelog template\n\n    Closes #127\n</code></pre></div></div><h2 id="custom-commit-types" tabindex="-1"><a class="header-anchor" href="#custom-commit-types" aria-hidden="true">#</a> Custom commit types</h2><p>By default <code>coco</code> supports standard conventional commits type <code>feat</code>, <code>fix</code> plus the angular commit types: <code>build</code>, <code>ci</code>, <code>revert</code>, <code>docs</code>, <code>test</code>, <code>style</code>, <code>chore</code>, <code>perf</code>. If you want to use more types you can add them to a file named <code>cog.toml</code> in your repository root directory :</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="hljs-section">[commit_types]</span>\n<span class="hljs-attr">hotfix</span> = { changelog_title = <span class="hljs-string">&quot;Hotfixes&quot;</span> }\n<span class="hljs-attr">release</span> = { changelog_title = <span class="hljs-string">&quot;Releases&quot;</span> }\n</code></pre></div><p>The above config would generate a <code>coco hotfix</code> and <code>coco release</code> subcommands following the same structure as the default ones.</p>',12),C={},E=(0,a(3744).Z)(C,[["render",function(e,s){const a=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[n,(0,o._)("p",null,[t,c,(0,o._)("a",l,[i,(0,o.Wm)(a)]),r,(0,o._)("a",d,[p,(0,o.Wm)(a)]),m]),h,(0,o._)("p",null,[u,(0,o._)("a",g,[b,(0,o.Wm)(a)]),f,v,y]),(0,o._)("p",null,[w,k,x,j,(0,o._)("a",_,[U,(0,o.Wm)(a)]),q]),T],64)}]])},3744:(e,s)=>{s.Z=(e,s)=>{const a=e.__vccOpts||e;for(const[e,o]of s)a[e]=o;return a}},1595:(e,s,a)=>{a.r(s),a.d(s,{data:()=>o});const o={key:"v-6beb5861",path:"/coco_guide/",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Conventional commits",slug:"conventional-commits",children:[]},{level:2,title:"Helpful error messages",slug:"helpful-error-messages",children:[]},{level:2,title:"Breaking changes",slug:"breaking-changes",children:[]},{level:2,title:"Commit Body and footers",slug:"commit-body-and-footers",children:[]},{level:2,title:"Custom commit types",slug:"custom-commit-types",children:[]}],filePathRelative:"coco_guide/README.md",git:{updatedTime:1637916097e3,contributors:[{name:"Paul Delafosse",email:"paul.delafosse@protonmail.com",commits:8},{name:"Hugo Nicolas",email:"hugo.nicolas.hn@gmail.com",commits:2}]}}}}]);