"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[108],{9761:(l,e,t)=>{t.r(e),t.d(e,{default:()=>Kl});var o=t(6252);const n=(0,o._)("h1",{id:"changelog-template-reference",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#changelog-template-reference","aria-hidden":"true"},"#"),(0,o.Uk)(" Changelog template reference")],-1),i=(0,o.Uk)("For a detailed guide on how to write a template changelog refer to "),r={href:"https://tera.netlify.app/docs/#templates",target:"_blank",rel:"noopener noreferrer"},s=(0,o.Uk)("tera's documentation"),a=(0,o.Uk)("."),u=(0,o.Uk)("You can also take a look at the "),c={href:"https://github.com/cocogitto/cocogitto/tree/main/src/conventional/changelog/template",target:"_blank",rel:"noopener noreferrer"},d=(0,o.Uk)("built-in templates"),g=(0,o.Uk)(" in cocogitto repository."),p=(0,o._)("h2",{id:"context",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#context","aria-hidden":"true"},"#"),(0,o.Uk)(" Context")],-1),_=(0,o._)("h3",{id:"release",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#release","aria-hidden":"true"},"#"),(0,o.Uk)(" Release")],-1),m=(0,o._)("p",null,[(0,o._)("code",null,"commits"),(0,o.Uk)(" :")],-1),h=(0,o._)("strong",null,"Type:",-1),f=(0,o.Uk)(),k=(0,o._)("code",null,"Array<Commit>",-1),U=(0,o._)("li",null,[(0,o._)("strong",null,"Description:"),(0,o.Uk)(" commits contained in the release")],-1),b=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"false")],-1),y=(0,o._)("p",null,[(0,o._)("code",null,"version"),(0,o.Uk)(" :")],-1),w=(0,o._)("strong",null,"Type:",-1),D=(0,o.Uk)(),v=(0,o._)("code",null,"GitRef",-1),T=(0,o._)("li",null,[(0,o._)("strong",null,"Description:"),(0,o.Uk)(" tag name or/and git oid of the current release tip")],-1),x=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"false")],-1),N=(0,o._)("p",null,[(0,o._)("code",null,"from")],-1),S=(0,o._)("strong",null,"Type:",-1),j=(0,o.Uk)(),C=(0,o._)("code",null,"GitRef",-1),W=(0,o._)("li",null,[(0,o._)("strong",null,"Description:"),(0,o.Uk)(" tag name or/and git oid of the commit preceding the release")],-1),R=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"false")],-1),E=(0,o.uE)("<li><p><code>date</code></p><ul><li><strong>Type:</strong> <code>Date</code></li><li><strong>Description:</strong> date of the release</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",1),q=(0,o._)("h3",{id:"commit",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#commit","aria-hidden":"true"},"#"),(0,o.Uk)(" Commit")],-1),A=(0,o.uE)("<li><p><code>id</code>:</p><ul><li><strong>Type:</strong> <code>String</code>, <code>SHA-1</code></li><li><strong>Description:</strong> commit <code>SHA-1</code></li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",1),F=(0,o._)("p",null,[(0,o._)("code",null,"author"),(0,o.Uk)(":")],-1),G=(0,o._)("li",null,[(0,o._)("strong",null,"Type:"),(0,o.Uk)(),(0,o._)("code",null,"String")],-1),H=(0,o._)("strong",null,"Description:",-1),O=(0,o.Uk)(" the name of the "),L=(0,o.Uk)("commit author"),P=(0,o.Uk)(" on the remote platform"),Y=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"true")],-1),Z=(0,o._)("p",null,[(0,o._)("code",null,"signature"),(0,o.Uk)(":")],-1),z=(0,o._)("li",null,[(0,o._)("strong",null,"Type:"),(0,o.Uk)(),(0,o._)("code",null,"String")],-1),I=(0,o._)("strong",null,"Description:",-1),M=(0,o.Uk)(" the git signature of the "),V=(0,o.Uk)("commit author"),B=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"false")],-1),J=(0,o.uE)("<li><p><code>type</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit type of the commit</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>date</code>:</p><ul><li><strong>Type:</strong> <code>Date</code></li><li><strong>Description:</strong> the date of the commit</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>scope</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the scope of the commit</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li><li><p><code>summary</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit message summary</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><p><code>body</code>:</p><ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the conventional commit message body</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li><li><p><code>breaking_change</code>:</p><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Description:</strong> is the commit marked as a breaking change</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li>",6),K=(0,o._)("p",null,[(0,o._)("code",null,"footer"),(0,o.Uk)(":")],-1),Q=(0,o._)("strong",null,"Type:",-1),X=(0,o.Uk)(),$=(0,o._)("code",null,"Array<Footer>",-1),ll=(0,o._)("li",null,[(0,o._)("strong",null,"Description:"),(0,o.Uk)(" the conventional commit footers")],-1),el=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"false")],-1),tl=(0,o._)("h3",{id:"gitref",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#gitref","aria-hidden":"true"},"#"),(0,o.Uk)(" GitRef")],-1),ol=(0,o._)("p",null,[(0,o._)("code",null,"tag"),(0,o.Uk)(":")],-1),nl=(0,o._)("li",null,[(0,o._)("strong",null,"Type:"),(0,o.Uk)(),(0,o._)("code",null,"String")],-1),il=(0,o._)("strong",null,"Description:",-1),rl=(0,o.Uk)(" a SemVer tag name, with an optional "),sl=(0,o._)("code",null,"tag_prefix",-1),al=(0,o.Uk)(". "),ul=(0,o._)("code",null,"null",-1),cl=(0,o.Uk)(" if the version is pointing to unreleased changes."),dl=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"true")],-1),gl=(0,o.uE)("<li><p><code>id</code>:</p><ul><li><strong>Type:</strong> <code>Sting</code>, <code>SHA-1</code></li><li><strong>Description:</strong> the id of the latest commit in the release. This can be <code>null</code> only when using <code>cog bump</code>, because it generates a changelog before creating the target version.</li><li><strong>Nullable:</strong> <code>true</code></li></ul></li>",1),pl=(0,o.uE)('<h3 id="footer" tabindex="-1"><a class="header-anchor" href="#footer" aria-hidden="true">#</a> Footer</h3><ul><li><code>token</code>: <ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the footer token</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li><li><code>content</code>: <ul><li><strong>Type:</strong> <code>String</code></li><li><strong>Description:</strong> the footer content</li><li><strong>Nullable:</strong> <code>false</code></li></ul></li></ul><h3 id="remote" tabindex="-1"><a class="header-anchor" href="#remote" aria-hidden="true">#</a> Remote</h3>',3),_l=(0,o._)("code",null,"platform",-1),ml=(0,o.Uk)(": "),hl=(0,o._)("li",null,[(0,o._)("strong",null,"Type:"),(0,o.Uk)(),(0,o._)("code",null,"String")],-1),fl=(0,o._)("strong",null,"Description:",-1),kl=(0,o.Uk)(" url to the configured git platform in the form "),Ul=(0,o._)("code",null,"https://{remote}",-1),bl=(0,o.Uk)(" ( see: "),yl=(0,o.Uk)("Config -> Changelog -> Remote"),wl=(0,o.Uk)(")"),Dl=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"true")],-1),vl=(0,o._)("code",null,"owner",-1),Tl=(0,o.Uk)(": "),xl=(0,o._)("li",null,[(0,o._)("strong",null,"Type:"),(0,o.Uk)(),(0,o._)("code",null,"String")],-1),Nl=(0,o._)("strong",null,"Description:",-1),Sl=(0,o.Uk)(" name of the repository owner (see: "),jl=(0,o.Uk)("Config -> Changelog -> Owner"),Cl=(0,o.Uk)(")"),Wl=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"true")],-1),Rl=(0,o._)("code",null,"repository_url",-1),El=(0,o.Uk)(": "),ql=(0,o._)("code",null,"false",-1),Al=(0,o._)("li",null,[(0,o._)("strong",null,"Type:"),(0,o.Uk)(),(0,o._)("code",null,"String")],-1),Fl=(0,o._)("strong",null,"Description:",-1),Gl=(0,o.Uk)(" url to the repository in the form "),Hl=(0,o._)("code",null,"https://{remote}/{owner}/{repository}",-1),Ol=(0,o.Uk)("( see: "),Ll=(0,o.Uk)("Config -> Changelog -> repository"),Pl=(0,o.Uk)(")"),Yl=(0,o._)("li",null,[(0,o._)("strong",null,"Nullable:"),(0,o.Uk)(),(0,o._)("code",null,"true")],-1),Zl=(0,o._)("h2",{id:"filters",tabindex:"-1"},[(0,o._)("a",{class:"header-anchor",href:"#filters","aria-hidden":"true"},"#"),(0,o.Uk)(" Filters")],-1),zl=(0,o.Uk)("In addition to the "),Il={href:"https://tera.netlify.app/docs/#built-ins",target:"_blank",rel:"noopener noreferrer"},Ml=(0,o.Uk)("tera built-in filters"),Vl=(0,o.Uk)(" you can use the following:"),Bl=(0,o.uE)('<ul><li><code>unscoped</code><ul><li><strong>Description:</strong> filter unscoped commits from releases commits. Example:</li><li><strong>Example:</strong></li></ul><div class="language-tera ext-tera"><pre class="language-tera"><code>    {% <span class="hljs-meta">for </span>commit in commits | unscoped %}                                                                       \n        {% <span class="hljs-number">if </span>commit.author %}                                                                                         \n            {% <span class="hljs-built_in">set </span>author = <span class="hljs-string">&quot;@&quot;</span> ~ commit.author %}                                                                     \n        {% <span class="hljs-number">else </span>%}                                                                                                     \n            {% <span class="hljs-built_in">set </span>author = commit.signature %}                                                                        \n        {% <span class="hljs-number">endif </span>%}                                                                                                    \n            - <span class="hljs-keyword">{{ commit.id }}</span> - <span class="hljs-keyword">{{ commit.summary }}</span> - <span class="hljs-keyword">{{ author }}</span>\n    {% <span class="hljs-meta">endfor </span>%}    \n</code></pre></div></li><li><code>upper_first</code><ul><li><strong>Description:</strong> capitalize the first letter of a string</li><li><strong>Example:</strong></li></ul><div class="language-tera ext-tera"><pre class="language-tera"><code>   {% <span class="hljs-meta">for </span>type, typed_commits in commits | sort(attribute=<span class="hljs-string">&quot;type&quot;</span>)| group_by(attribute=<span class="hljs-string">&quot;type&quot;</span>) %}                           \n    #### <span class="hljs-keyword">{{ type | upper_first }}</span>\n   {% <span class="hljs-meta">endfor </span>%}\n</code></pre></div></li></ul>',1),Jl={},Kl=(0,t(3744).Z)(Jl,[["render",function(l,e){const t=(0,o.up)("OutboundLink"),Jl=(0,o.up)("RouterLink");return(0,o.wg)(),(0,o.iD)(o.HY,null,[n,(0,o._)("p",null,[i,(0,o._)("a",r,[s,(0,o.Wm)(t)]),a]),(0,o._)("p",null,[u,(0,o._)("a",c,[d,(0,o.Wm)(t)]),g]),p,_,(0,o._)("ul",null,[(0,o._)("li",null,[m,(0,o._)("ul",null,[(0,o._)("li",null,[h,f,(0,o.Wm)(Jl,{to:"/template/#commit"},{default:(0,o.w5)((()=>[k])),_:1})]),U,b])]),(0,o._)("li",null,[y,(0,o._)("ul",null,[(0,o._)("li",null,[w,D,(0,o.Wm)(Jl,{to:"/template/#gitref"},{default:(0,o.w5)((()=>[v])),_:1})]),T,x])]),(0,o._)("li",null,[N,(0,o._)("ul",null,[(0,o._)("li",null,[S,j,(0,o.Wm)(Jl,{to:"/template/#gitref"},{default:(0,o.w5)((()=>[C])),_:1})]),W,R])]),E]),q,(0,o._)("ul",null,[A,(0,o._)("li",null,[F,(0,o._)("ul",null,[G,(0,o._)("li",null,[H,O,(0,o.Wm)(Jl,{to:"/config/#authors"},{default:(0,o.w5)((()=>[L])),_:1}),P]),Y])]),(0,o._)("li",null,[Z,(0,o._)("ul",null,[z,(0,o._)("li",null,[I,M,(0,o.Wm)(Jl,{to:"/config/#authors"},{default:(0,o.w5)((()=>[V])),_:1})]),B])]),J,(0,o._)("li",null,[K,(0,o._)("ul",null,[(0,o._)("li",null,[Q,X,(0,o.Wm)(Jl,{to:"/template/#footer"},{default:(0,o.w5)((()=>[$])),_:1})]),ll,el])])]),tl,(0,o._)("ul",null,[(0,o._)("li",null,[ol,(0,o._)("ul",null,[nl,(0,o._)("li",null,[il,rl,(0,o.Wm)(Jl,{to:"/config/#tag_prefix"},{default:(0,o.w5)((()=>[sl])),_:1}),al,ul,cl]),dl])]),gl]),pl,(0,o._)("ul",null,[(0,o._)("li",null,[_l,ml,(0,o._)("ul",null,[hl,(0,o._)("li",null,[fl,kl,Ul,bl,(0,o.Wm)(Jl,{to:"/config/#remote"},{default:(0,o.w5)((()=>[yl])),_:1}),wl]),Dl])]),(0,o._)("li",null,[vl,Tl,(0,o._)("ul",null,[xl,(0,o._)("li",null,[Nl,Sl,(0,o.Wm)(Jl,{to:"/config/#owner"},{default:(0,o.w5)((()=>[jl])),_:1}),Cl]),Wl])]),(0,o._)("li",null,[Rl,El,ql,(0,o._)("ul",null,[Al,(0,o._)("li",null,[Fl,Gl,Hl,Ol,(0,o.Wm)(Jl,{to:"/config/#owner"},{default:(0,o.w5)((()=>[Ll])),_:1}),Pl]),Yl])])]),Zl,(0,o._)("p",null,[zl,(0,o._)("a",Il,[Ml,(0,o.Wm)(t)]),Vl]),Bl],64)}]])},3744:(l,e)=>{e.Z=(l,e)=>{const t=l.__vccOpts||l;for(const[l,o]of e)t[l]=o;return t}},1707:(l,e,t)=>{t.r(e),t.d(e,{data:()=>o});const o={key:"v-7493181c",path:"/template/",title:"Changelog template reference",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Context",slug:"context",children:[{level:3,title:"Release",slug:"release",children:[]},{level:3,title:"Commit",slug:"commit",children:[]},{level:3,title:"GitRef",slug:"gitref",children:[]},{level:3,title:"Footer",slug:"footer",children:[]},{level:3,title:"Remote",slug:"remote",children:[]}]},{level:2,title:"Filters",slug:"filters",children:[]}],filePathRelative:"template/README.md",git:{updatedTime:1636895895e3,contributors:[{name:"Paul Delafosse",email:"paul.delafosse@protonmail.com",commits:2}]}}}}]);